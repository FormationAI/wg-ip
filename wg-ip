#!/bin/bash

# usage:
# [-6|-4] (default: -6)
# --prefix (default: fd1a:6126:2887 for ipv6)
#          (default: 10. for ipv4)
# 28387a164997aec602d65711a6a74d4ee162d8fb5987702e7962031a61262887
#

fatal(){
    echo "$@" > /dev/stderr
    exit 1
}

expand_ipv6() {
  ip=$1

  # prepend 0 if we start with :
  grep -qs "^:" <<< $ip && ip="0${ip}"

  # expand ::
  if grep -qs "::" <<< "$ip"; then
    colons=$(sed 's/[^:]//g' <<< "$ip")
    missing=$(sed "s/$colons//" <<< :::::::::)
    expanded=$(sed 's/:/:0/g' <<< $missing)
    ip=$(sed "s/::/$expanded/" <<< $ip)
  fi

  blocks=$(grep -o "[0-9a-f]\+" <<< "$ip")
  set $blocks

  printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n" \
    $(( 16#$1 )) \
    $(( 16#$2 )) \
    $(( 16#$3 )) \
    $(( 16#$4 )) \
    $(( 16#$5 )) \
    $(( 16#$6 )) \
    $(( 16#$7 )) \
    $(( 16#$8 ))
}

test_expand_ipv6(){
  status=0
  tests="2001:db8::2:1        2001:0db8:0000:0000:0000:0000:0002:0001 \
         2001:db8:0:1:1:1:1:1 2001:0db8:0000:0001:0001:0001:0001:0001 \
         2001:db8::1:0:0:1    2001:0db8:0000:0000:0001:0000:0000:0001 \
         2001:db8::1          2001:0db8:0000:0000:0000:0000:0000:0001 \
         ::                   0000:0000:0000:0000:0000:0000:0000:0000 \
         ::1                  0000:0000:0000:0000:0000:0000:0000:0001 \
         1::                  0001:0000:0000:0000:0000:0000:0000:0000"
  set $tests
  while (( "$#" )); do
    if [ "$(expand_ipv6 $1)" == "$2" ]; then
      echo "PASS"
    else
      echo "FAIL"
      status=1
    fi
    shift 2
  done
  return $status
}

compress_ipv6() {
  ip=$1

  blocks=$(grep -o "[0-9a-f]\+" <<< "$ip")
  set $blocks

  # compress leading zeros
  ip=$(printf "%x:%x:%x:%x:%x:%x:%x:%x\n" \
    $(( 16#$1 )) \
    $(( 16#$2 )) \
    $(( 16#$3 )) \
    $(( 16#$4 )) \
    $(( 16#$5 )) \
    $(( 16#$6 )) \
    $(( 16#$7 )) \
    $(( 16#$8 ))
  )

  # prepend : for easier matching
  ip=:$ip

  # :: must compress the longest chain
  for pattern in :0:0:0:0:0:0:0:0 \
           :0:0:0:0:0:0:0 \
           :0:0:0:0:0:0 \
           :0:0:0:0:0 \
           :0:0:0:0 \
           :0:0; do
    if grep -qs $pattern <<< $ip; then
      ip=$(sed "s/$pattern/::/" <<< $ip)
      # if the substitution occured before the end, we have :::
      ip=$(sed 's/:::/::/' <<< $ip)
      break # only one substitution
    fi
  done

  # remove prepending : if necessary
  grep -qs "^:[^:]" <<< $ip && ip=$(sed 's/:\(.*\)/\1/g' <<< $ip)

  echo $ip
}

test_compress_ipv6(){
  status=0
  tests="2001:0db8:0000:0000:0000:0000:0002:0001 2001:db8::2:1        \
         2001:0db8:0000:0001:0001:0001:0001:0001 2001:db8:0:1:1:1:1:1 \
         2001:0db8:0000:0000:0001:0000:0000:0001 2001:db8::1:0:0:1    \
         2001:0db8:0000:0000:0000:0000:0000:0001 2001:db8::1          \
         0000:0000:0000:0000:0000:0000:0000:0000 ::                   \
         0000:0000:0000:0000:0000:0000:0000:0001 ::1                  \
         0001:0000:0000:0000:0000:0000:0000:0000 1::                 "
  set $tests
  while (( "$#" )); do
    if [ "$(compress_ipv6 $1)" == "$2" ]; then
      echo "PASS"
    else
      echo "FAIL"
      status=1
    fi
    shift 2
  done
  return $status
}

is_ipv6(){
  expanded="$(expand_ipv6 $1)"
  [ "$1" == "$expanded" ] && return 0
  compressed="$(compress_ipv6 $expanded)"
  [ "$1" == "$compressed" ] && return 0
  return 1
}

test_is_ipv6(){
  ok="2001:db8::2:1 \
      2001:db8:0:1:1:1:1:1 \
      2001:db8::1:0:0:1 \
      2001:db8::1 \
      :: \
      ::1 \
      1::"
  ko="2001:db8::0:1 \
      2001:db8::1:1:1:1:1 \
      2001:db8:0:0:1::1 \
      2001:DB8::1"
  for ip in $ok; do
    is_ipv6 $ip && echo PASS || echo FAIL
  done
  for ip in $ko; do
    ! is_ipv6 $ip && echo PASS || echo FAIL
  done
}

is_ipv4(){
  grep -qs "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}" <<< $1 \
    || return 1
  for i in $(grep -o "[0-9]\+" <<< $1); do
    if [ "$i" -gt 255 ]; then
      return 1
    fi
  done
  return 0
}

test_is_ipv4(){
  ok="4.2.2.2 \
      192.168.1.1 \
      0.0.0.0 \
      255.255.255.255 \
      192.168.0.1"
  ko="a.b.c.d \
      255.255.255.256 \
      192.168.0 \
      1234.123.123.123"
  for ip in $ok; do
    is_ipv4 $ip && echo PASS || echo FAIL
  done
  for ip in $ko; do
    ! is_ipv4 $ip && echo PASS || echo FAIL
  done
}

netmask_bytes(){
  netmask=$1
  len=$2

  res=""
  for i in $(seq 0 $(( $len - 1 )) ); do
    b=0
    for j in $(seq 0 7); do
      if [ $(( 8 * $i + $j )) -lt $netmask ]; then
        b=$(( $b | 1 << (7 - $j) ))
      fi
    done
    res="$res $b"
  done
  echo $res
}

test_netmask_bytes(){
  if [ "$(netmask_bytes 8 4)" == "255 0 0 0" ]; then
    echo PASS
  else
    echo FAIL
  fi
  if [ "$(netmask_bytes 9 4)" == "255 128 0 0" ]; then
    echo PASS
  else
    echo FAIL
  fi
}

# key [subnet]
gen_ipv6(){
  pubkey=$1
  subnet=$2

  [ "$subnet" == "" ] && subnet="fd1a:6126:2887::/48"

  prefix=$(cut -d/ -f1 <<< $subnet)
  if ! is_ipv6 $prefix; then
    fatal "$prefix: not a valid ipv6 address"
  fi
  prefix=$(expand_ipv6 $prefix)

  netmask=$(cut -d/ -f2 <<< $subnet)
  if [ "$netmask" -le 0 -o "$netmask" -ge 128 ]; then
    fatal "$netmask: invalid netmask"
  fi

  pubkeychecksum=$(sha256sum <<< $pubkey)
  genbytes=( $(grep -o "[0-9a-f]\{2\}" <<< $pubkeychecksum) )
  netbytes=( $(grep -o "[0-9a-f]\{2\}" <<< $prefix) )

  maskbytes=( $(netmask_bytes $netmask 16) )

  bytes=""
  for i in $(seq 0 15); do
    m=${maskbytes[$i]}
    m_flipped=$(( $m ^ 16#ff ))
    b=$(( (16#${netbytes[$i]} & $m) | (16#${genbytes[$i]} & $m_flipped) ))
    bytes="$bytes $b"
  done

  printf "%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x\n" \
    $bytes

}

test_gen_ipv6() {
  tests="foo fd1a:6126:2887:f9b1:d61e:21e7:96d7:8dcc \
         bar fd1a:6126:2887:6691:8c98:63af:ca94:2d0f"
  set $tests
  while (( "$#" )); do
    if [ "$(gen_ipv6 $1)" == "$2" ]; then
      echo "PASS"
    else
      echo "FAIL"
      status=1
    fi
    shift 2
  done
  return $status
}

# key [subnet]
gen_ipv4(){
  pubkey=$1
  subnet=$2

  [ "$subnet" == "" ] && subnet="10.0.0.0/8"

  prefix=$(cut -d/ -f1 <<< $subnet)
  if ! is_ipv4 $prefix; then
    fatal "$prefix: not a valid ipv4 address"
  fi

  netmask=$(cut -d/ -f2 <<< $subnet)
  if [ "$netmask" -le 0 -o "$netmask" -ge 32 ]; then
    fatal "$netmask: invalid netmask"
  fi

  pubkeychecksum=$(sha256sum <<< $pubkey)
  genbytes=( $(grep -o "[0-9a-f]\{2\}" <<< $pubkeychecksum) )
  netbytes=( $(grep -o "[0-9]\+" <<< $prefix) )

  netmaskbytes=()
  genmaskbytes=()
  for i in $(seq 0 3); do
    n=0
    g=0
    for j in $(seq 0 7); do
      if [ $(( 8 * $i + $j )) -lt $netmask ]; then
        n=$(( $n | 1 << (7 - $j) ))
      else
        g=$(( $g | 1 << (7 - $j) ))
      fi
    done
    netmaskbytes+=($n)
    genmaskbytes+=($g)
  done

  bytes=""
  for i in $(seq 0 3); do
    b=0
    b=$(( $b | (${netbytes[$i]} & ${netmaskbytes[$i]}) ))
    b=$(( $b | (16#${genbytes[$i]} & ${genmaskbytes[$i]}) ))
    bytes="$bytes $b"
  done

  printf "%d.%d.%d.%d\n" \
    ${bytes[@]}

}

test_gen_ipv4() {
  tests="foo 10.187.157.128 \
         bar 10.134.94.149"
  set $tests
  while (( "$#" )); do
    if [ "$(gen_ipv4 $1)" == "$2" ]; then
      echo "PASS"
    else
      echo "FAIL"
      status=1
    fi
    shift 2
  done
  return $status
}

runtests() {
  test_expand_ipv6
  test_compress_ipv6
  test_is_ipv6
  test_is_ipv4
  test_netmask_bytes
  test_gen_ipv6
  test_gen_ipv4
}

runtests

#prefix4="10.0.0.0/8"
#prefix6="fd1a:6126:2887::/48"
#bits=128
#prefix="$prefix6"
#ipversion=6
#pubkey=""
#
#eoo=0 # end of options
#while [[ "$1" ]];
#do
#    if ! ((eoo)); then
#        case "$1" in
#            --test)
#                runtests
#                exit
#                ;;
#            -4)
#                ipversion="4"
#                bits=32
#                [ "$prefix" == "" ] && prefix="$prefix4"
#                shift
#                ;;
#            -6)
#                ipversion="6"
#                bits=128
#                [ "$prefix" == "" ] && prefix="$prefix6"
#                shift
#                ;;
#            --prefix)
#                shift
#                prefix=$1
#                shift
#                ;;
#            *)
#                [ "$pubkey" != "" ] && fatal "exactly 1 pubkey is needed"
#                pubkey="$1"
#                shift
#                ;;
#        esac
#    fi
#done
#
#if [ "$pubkey" == "" ]; then
#    fatal "exactly 1 pubkey is needed"
#fi
#
#mask=$(echo "$prefix" | cut -d/ -f2)
#genbits=$(( $bits - $mask ))
#genbytes=$(( $genbits / 8 ))
#rbits=$(( $genbits - 8 * $genbytes))
#
#pseudorandom=$(echo -n "$pubkey" | sha256sum | grep -o ..)
#set $pseudorandom
#
#for i in $(seq 1 $genbytes); do
#    b=$(( 16#$1 ))
#    echo $b
#    shift
#done
#
#
#
#
##x=ff
##echo $(( 16#$x ))
##echo $(( 16#ff >> 2 ))
##echo $rbits
#echo 16#$(( 16#ff00 | 16#00ff ))
#echo $ipversion
#echo $prefix
#echo $genbits
